searchState.loadedDescShard("imxrt_dma", 0, "Direct Memory Access (DMA) driver for i.MX RT processors.\nThrottles the amount of bus bandwidth consumed by the eDMA\nAn identifier describing the data transfer size\nA DMA driver.\nDescribes a transferrable DMA element; basically, an …\nContains the error value\nA wrapper around a DMA error status value\nContains the success value\nA DMA result\nDMA engine stalls for 4 cycles after each R/W.\nDMA engine stalls for 8 cycles after each R/W.\nThe core DMA transfer future\nDMA channels\nCreates the DMA channel described by <code>index</code>.\nIndicates the channel number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the transfer was cancelled\nIndicates a channel priority error\nIndicates a destination address error\nIndicates a destination bus error\nIndicates a destination offset error\nIndicates a group priority error\nIndicates a minor / major loop configuration error\nIndicates a scatter / gather configuration error\nIndicates a source address error\nIndicates a source bus error\nIndicates a source offset error\nLogical OR of all DMA channel error status bits\nDMA-powered memcpy\nCreate a new <code>Transfer</code> that performs the DMA transfer …\nCreate the DMA driver.\nHandle a DMA interrupt\nDMA support for hardware peripherals.\nReturns the raw error status value\nThe DMAMUX is always on, and there’s no need for software\nA DMA channel\nDMAMUX channel configuration\nThe DMAMUX is enabled, permitting hardware triggering. See …\nThe DMAMUX channel is disabled\nReturns the beginning transfer iterations setting for the …\nReturns the DMA channel number\nClears completion indication\nClears the error flag\nClear the interrupt flag from this DMA channel\nDisable the DMA channel, preventing any DMA transfers\nEnable the DMA channel for transfers\nEnable the channel without triggering\nReturns the value from the <strong>global</strong> error status register\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if this DMA channel is actively transferring data\nIndicates if the DMA transfer has completed\nIndicates if this DMA channel is enabled\nIndicates if the DMA channel is in an error state\nReturns <code>true</code> if the DMA channel is receiving a service …\nReturns <code>true</code> if this DMA channel generated an interrupt\nReset the transfer control descriptor owned by the DMA …\nSet the channel’s bandwidth control\nSet the DMAMUX channel configuration\nSet the destination address for a DMA transfer\nSet the transfer attributes for the destination\nSet a circular buffer as the destination for a DMA transfer\nSet a hardware peripheral as the destination for a DMA …\nSet the destination last addrss adjustment <em>in bytes</em>\nSet a linear buffer as the destination for a DMA transfer\nSet the destination offset <em>in bytes</em>\nEnable or disable ‘disable on completion’\nEnable or disable interrupt generation when the transfer …\nSet the number of <em>bytes</em> to transfer per minor loop\nSet the source address for a DMA transfer\nSet the transfer attributes for the source\nSet a circular buffer as the source for a DMA transfer\nSet a hardware peripheral as the source for a DMA transfer\nSet the source last address adjustment <em>in bytes</em>\nSet a linear buffer as the source for a DMA transfer\nSet the source offset <em>in bytes</em>\nTells the DMA channel how many transfer iterations to …\nStart a DMA transfer\nSet the periodic triggering flag to schedule DMA transfers …\nThe DMA channel source (slot number)\nA memcpy operation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerform a DMA-powered <code>memcpy</code> between the <code>source</code> and …\nIndicates that a peripheral can read and write from a …\nA peripheral that can be the destination for DMA data\nA full-duplex DMA transfer from a single buffer\nA DMA transfer that receives data from hardware\nA peripheral that can be the source of DMA data\nA DMA transfer that sends data to hardware\nReturns a pointer to the register into which the DMA …\nPeripheral destination request signal\nPerform any actions necessary to disable or cancel DMA …\nPerform any actions necessary to disable or cancel DMA …\nPerform any actions necessary to enable DMA transfers\nPerform any actions necessary to enable DMA transfers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerform a full-duplex DMA transfer using two DMA channels …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse a DMA channel to receive a <code>buffer</code> of elements from the …\nReturns a pointer to the register from which the DMA …\nPeripheral source request signal\nUse a DMA channel to send a <code>buffer</code> of data to the …")